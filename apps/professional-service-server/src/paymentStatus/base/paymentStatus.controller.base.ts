/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PaymentStatusService } from "../paymentStatus.service";
import { PaymentStatusCreateInput } from "./PaymentStatusCreateInput";
import { PaymentStatus } from "./PaymentStatus";
import { PaymentStatusFindManyArgs } from "./PaymentStatusFindManyArgs";
import { PaymentStatusWhereUniqueInput } from "./PaymentStatusWhereUniqueInput";
import { PaymentStatusUpdateInput } from "./PaymentStatusUpdateInput";

export class PaymentStatusControllerBase {
  constructor(protected readonly service: PaymentStatusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PaymentStatus })
  async createPaymentStatus(
    @common.Body() data: PaymentStatusCreateInput
  ): Promise<PaymentStatus> {
    return await this.service.createPaymentStatus({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PaymentStatus] })
  @ApiNestedQuery(PaymentStatusFindManyArgs)
  async paymentStatuses(
    @common.Req() request: Request
  ): Promise<PaymentStatus[]> {
    const args = plainToClass(PaymentStatusFindManyArgs, request.query);
    return this.service.paymentStatuses({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PaymentStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async paymentStatus(
    @common.Param() params: PaymentStatusWhereUniqueInput
  ): Promise<PaymentStatus | null> {
    const result = await this.service.paymentStatus({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PaymentStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePaymentStatus(
    @common.Param() params: PaymentStatusWhereUniqueInput,
    @common.Body() data: PaymentStatusUpdateInput
  ): Promise<PaymentStatus | null> {
    try {
      return await this.service.updatePaymentStatus({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PaymentStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePaymentStatus(
    @common.Param() params: PaymentStatusWhereUniqueInput
  ): Promise<PaymentStatus | null> {
    try {
      return await this.service.deletePaymentStatus({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
