/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PaymentStatus } from "./PaymentStatus";
import { PaymentStatusCountArgs } from "./PaymentStatusCountArgs";
import { PaymentStatusFindManyArgs } from "./PaymentStatusFindManyArgs";
import { PaymentStatusFindUniqueArgs } from "./PaymentStatusFindUniqueArgs";
import { CreatePaymentStatusArgs } from "./CreatePaymentStatusArgs";
import { UpdatePaymentStatusArgs } from "./UpdatePaymentStatusArgs";
import { DeletePaymentStatusArgs } from "./DeletePaymentStatusArgs";
import { PaymentStatusService } from "../paymentStatus.service";
@graphql.Resolver(() => PaymentStatus)
export class PaymentStatusResolverBase {
  constructor(protected readonly service: PaymentStatusService) {}

  async _paymentStatusesMeta(
    @graphql.Args() args: PaymentStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PaymentStatus])
  async paymentStatuses(
    @graphql.Args() args: PaymentStatusFindManyArgs
  ): Promise<PaymentStatus[]> {
    return this.service.paymentStatuses(args);
  }

  @graphql.Query(() => PaymentStatus, { nullable: true })
  async paymentStatus(
    @graphql.Args() args: PaymentStatusFindUniqueArgs
  ): Promise<PaymentStatus | null> {
    const result = await this.service.paymentStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PaymentStatus)
  async createPaymentStatus(
    @graphql.Args() args: CreatePaymentStatusArgs
  ): Promise<PaymentStatus> {
    return await this.service.createPaymentStatus({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PaymentStatus)
  async updatePaymentStatus(
    @graphql.Args() args: UpdatePaymentStatusArgs
  ): Promise<PaymentStatus | null> {
    try {
      return await this.service.updatePaymentStatus({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentStatus)
  async deletePaymentStatus(
    @graphql.Args() args: DeletePaymentStatusArgs
  ): Promise<PaymentStatus | null> {
    try {
      return await this.service.deletePaymentStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
