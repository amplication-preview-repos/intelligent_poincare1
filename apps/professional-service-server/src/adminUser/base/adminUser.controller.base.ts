/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AdminUserService } from "../adminUser.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AdminUserCreateInput } from "./AdminUserCreateInput";
import { AdminUser } from "./AdminUser";
import { AdminUserFindManyArgs } from "./AdminUserFindManyArgs";
import { AdminUserWhereUniqueInput } from "./AdminUserWhereUniqueInput";
import { AdminUserUpdateInput } from "./AdminUserUpdateInput";
import { LoginInput } from "../LoginInput";
import { LoginResponse } from "../LoginResponse";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AdminUserControllerBase {
  constructor(
    protected readonly service: AdminUserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AdminUser })
  @nestAccessControl.UseRoles({
    resource: "AdminUser",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAdminUser(
    @common.Body() data: AdminUserCreateInput
  ): Promise<AdminUser> {
    return await this.service.createAdminUser({
      data: data,
      select: {
        createdAt: true,
        id: true,
        password: true,
        passwordService: true,
        rolesBuilder: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AdminUser] })
  @ApiNestedQuery(AdminUserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AdminUser",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async adminUsers(@common.Req() request: Request): Promise<AdminUser[]> {
    const args = plainToClass(AdminUserFindManyArgs, request.query);
    return this.service.adminUsers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        password: true,
        passwordService: true,
        rolesBuilder: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AdminUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AdminUser",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async adminUser(
    @common.Param() params: AdminUserWhereUniqueInput
  ): Promise<AdminUser | null> {
    const result = await this.service.adminUser({
      where: params,
      select: {
        createdAt: true,
        id: true,
        password: true,
        passwordService: true,
        rolesBuilder: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AdminUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AdminUser",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAdminUser(
    @common.Param() params: AdminUserWhereUniqueInput,
    @common.Body() data: AdminUserUpdateInput
  ): Promise<AdminUser | null> {
    try {
      return await this.service.updateAdminUser({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          password: true,
          passwordService: true,
          rolesBuilder: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AdminUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AdminUser",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAdminUser(
    @common.Param() params: AdminUserWhereUniqueInput
  ): Promise<AdminUser | null> {
    try {
      return await this.service.deleteAdminUser({
        where: params,
        select: {
          createdAt: true,
          id: true,
          password: true,
          passwordService: true,
          rolesBuilder: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/login")
  @swagger.ApiOkResponse({
    type: LoginResponse,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async LoginAdminUser(
    @common.Body()
    body: LoginInput
  ): Promise<LoginResponse> {
    return this.service.LoginAdminUser(body);
  }
}
