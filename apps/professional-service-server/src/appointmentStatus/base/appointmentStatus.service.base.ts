/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AppointmentStatus as PrismaAppointmentStatus,
} from "@prisma/client";

export class AppointmentStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AppointmentStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.appointmentStatus.count(args);
  }

  async appointmentStatuses(
    args: Prisma.AppointmentStatusFindManyArgs
  ): Promise<PrismaAppointmentStatus[]> {
    return this.prisma.appointmentStatus.findMany(args);
  }
  async appointmentStatus(
    args: Prisma.AppointmentStatusFindUniqueArgs
  ): Promise<PrismaAppointmentStatus | null> {
    return this.prisma.appointmentStatus.findUnique(args);
  }
  async createAppointmentStatus(
    args: Prisma.AppointmentStatusCreateArgs
  ): Promise<PrismaAppointmentStatus> {
    return this.prisma.appointmentStatus.create(args);
  }
  async updateAppointmentStatus(
    args: Prisma.AppointmentStatusUpdateArgs
  ): Promise<PrismaAppointmentStatus> {
    return this.prisma.appointmentStatus.update(args);
  }
  async deleteAppointmentStatus(
    args: Prisma.AppointmentStatusDeleteArgs
  ): Promise<PrismaAppointmentStatus> {
    return this.prisma.appointmentStatus.delete(args);
  }
}
