/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AppointmentStatus } from "./AppointmentStatus";
import { AppointmentStatusCountArgs } from "./AppointmentStatusCountArgs";
import { AppointmentStatusFindManyArgs } from "./AppointmentStatusFindManyArgs";
import { AppointmentStatusFindUniqueArgs } from "./AppointmentStatusFindUniqueArgs";
import { CreateAppointmentStatusArgs } from "./CreateAppointmentStatusArgs";
import { UpdateAppointmentStatusArgs } from "./UpdateAppointmentStatusArgs";
import { DeleteAppointmentStatusArgs } from "./DeleteAppointmentStatusArgs";
import { AppointmentStatusService } from "../appointmentStatus.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AppointmentStatus)
export class AppointmentStatusResolverBase {
  constructor(
    protected readonly service: AppointmentStatusService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AppointmentStatus",
    action: "read",
    possession: "any",
  })
  async _appointmentStatusesMeta(
    @graphql.Args() args: AppointmentStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AppointmentStatus])
  @nestAccessControl.UseRoles({
    resource: "AppointmentStatus",
    action: "read",
    possession: "any",
  })
  async appointmentStatuses(
    @graphql.Args() args: AppointmentStatusFindManyArgs
  ): Promise<AppointmentStatus[]> {
    return this.service.appointmentStatuses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AppointmentStatus, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AppointmentStatus",
    action: "read",
    possession: "own",
  })
  async appointmentStatus(
    @graphql.Args() args: AppointmentStatusFindUniqueArgs
  ): Promise<AppointmentStatus | null> {
    const result = await this.service.appointmentStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AppointmentStatus)
  @nestAccessControl.UseRoles({
    resource: "AppointmentStatus",
    action: "create",
    possession: "any",
  })
  async createAppointmentStatus(
    @graphql.Args() args: CreateAppointmentStatusArgs
  ): Promise<AppointmentStatus> {
    return await this.service.createAppointmentStatus({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AppointmentStatus)
  @nestAccessControl.UseRoles({
    resource: "AppointmentStatus",
    action: "update",
    possession: "any",
  })
  async updateAppointmentStatus(
    @graphql.Args() args: UpdateAppointmentStatusArgs
  ): Promise<AppointmentStatus | null> {
    try {
      return await this.service.updateAppointmentStatus({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AppointmentStatus)
  @nestAccessControl.UseRoles({
    resource: "AppointmentStatus",
    action: "delete",
    possession: "any",
  })
  async deleteAppointmentStatus(
    @graphql.Args() args: DeleteAppointmentStatusArgs
  ): Promise<AppointmentStatus | null> {
    try {
      return await this.service.deleteAppointmentStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
