/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RegistrationToken } from "./RegistrationToken";
import { RegistrationTokenCountArgs } from "./RegistrationTokenCountArgs";
import { RegistrationTokenFindManyArgs } from "./RegistrationTokenFindManyArgs";
import { RegistrationTokenFindUniqueArgs } from "./RegistrationTokenFindUniqueArgs";
import { CreateRegistrationTokenArgs } from "./CreateRegistrationTokenArgs";
import { UpdateRegistrationTokenArgs } from "./UpdateRegistrationTokenArgs";
import { DeleteRegistrationTokenArgs } from "./DeleteRegistrationTokenArgs";
import { RegistrationTokenService } from "../registrationToken.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RegistrationToken)
export class RegistrationTokenResolverBase {
  constructor(
    protected readonly service: RegistrationTokenService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RegistrationToken",
    action: "read",
    possession: "any",
  })
  async _registrationTokensMeta(
    @graphql.Args() args: RegistrationTokenCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RegistrationToken])
  @nestAccessControl.UseRoles({
    resource: "RegistrationToken",
    action: "read",
    possession: "any",
  })
  async registrationTokens(
    @graphql.Args() args: RegistrationTokenFindManyArgs
  ): Promise<RegistrationToken[]> {
    return this.service.registrationTokens(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RegistrationToken, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RegistrationToken",
    action: "read",
    possession: "own",
  })
  async registrationToken(
    @graphql.Args() args: RegistrationTokenFindUniqueArgs
  ): Promise<RegistrationToken | null> {
    const result = await this.service.registrationToken(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RegistrationToken)
  @nestAccessControl.UseRoles({
    resource: "RegistrationToken",
    action: "create",
    possession: "any",
  })
  async createRegistrationToken(
    @graphql.Args() args: CreateRegistrationTokenArgs
  ): Promise<RegistrationToken> {
    return await this.service.createRegistrationToken({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RegistrationToken)
  @nestAccessControl.UseRoles({
    resource: "RegistrationToken",
    action: "update",
    possession: "any",
  })
  async updateRegistrationToken(
    @graphql.Args() args: UpdateRegistrationTokenArgs
  ): Promise<RegistrationToken | null> {
    try {
      return await this.service.updateRegistrationToken({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RegistrationToken)
  @nestAccessControl.UseRoles({
    resource: "RegistrationToken",
    action: "delete",
    possession: "any",
  })
  async deleteRegistrationToken(
    @graphql.Args() args: DeleteRegistrationTokenArgs
  ): Promise<RegistrationToken | null> {
    try {
      return await this.service.deleteRegistrationToken(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
