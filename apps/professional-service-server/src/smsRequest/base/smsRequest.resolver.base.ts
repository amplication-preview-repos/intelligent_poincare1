/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SmsRequest } from "./SmsRequest";
import { SmsRequestCountArgs } from "./SmsRequestCountArgs";
import { SmsRequestFindManyArgs } from "./SmsRequestFindManyArgs";
import { SmsRequestFindUniqueArgs } from "./SmsRequestFindUniqueArgs";
import { CreateSmsRequestArgs } from "./CreateSmsRequestArgs";
import { UpdateSmsRequestArgs } from "./UpdateSmsRequestArgs";
import { DeleteSmsRequestArgs } from "./DeleteSmsRequestArgs";
import { SmsRequestService } from "../smsRequest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SmsRequest)
export class SmsRequestResolverBase {
  constructor(
    protected readonly service: SmsRequestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SmsRequest",
    action: "read",
    possession: "any",
  })
  async _smsRequestsMeta(
    @graphql.Args() args: SmsRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SmsRequest])
  @nestAccessControl.UseRoles({
    resource: "SmsRequest",
    action: "read",
    possession: "any",
  })
  async smsRequests(
    @graphql.Args() args: SmsRequestFindManyArgs
  ): Promise<SmsRequest[]> {
    return this.service.smsRequests(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SmsRequest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SmsRequest",
    action: "read",
    possession: "own",
  })
  async smsRequest(
    @graphql.Args() args: SmsRequestFindUniqueArgs
  ): Promise<SmsRequest | null> {
    const result = await this.service.smsRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SmsRequest)
  @nestAccessControl.UseRoles({
    resource: "SmsRequest",
    action: "create",
    possession: "any",
  })
  async createSmsRequest(
    @graphql.Args() args: CreateSmsRequestArgs
  ): Promise<SmsRequest> {
    return await this.service.createSmsRequest({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SmsRequest)
  @nestAccessControl.UseRoles({
    resource: "SmsRequest",
    action: "update",
    possession: "any",
  })
  async updateSmsRequest(
    @graphql.Args() args: UpdateSmsRequestArgs
  ): Promise<SmsRequest | null> {
    try {
      return await this.service.updateSmsRequest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SmsRequest)
  @nestAccessControl.UseRoles({
    resource: "SmsRequest",
    action: "delete",
    possession: "any",
  })
  async deleteSmsRequest(
    @graphql.Args() args: DeleteSmsRequestArgs
  ): Promise<SmsRequest | null> {
    try {
      return await this.service.deleteSmsRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
