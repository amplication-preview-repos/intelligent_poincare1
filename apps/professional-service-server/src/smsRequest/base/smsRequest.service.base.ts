/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SmsRequest as PrismaSmsRequest } from "@prisma/client";

export class SmsRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SmsRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.smsRequest.count(args);
  }

  async smsRequests(
    args: Prisma.SmsRequestFindManyArgs
  ): Promise<PrismaSmsRequest[]> {
    return this.prisma.smsRequest.findMany(args);
  }
  async smsRequest(
    args: Prisma.SmsRequestFindUniqueArgs
  ): Promise<PrismaSmsRequest | null> {
    return this.prisma.smsRequest.findUnique(args);
  }
  async createSmsRequest(
    args: Prisma.SmsRequestCreateArgs
  ): Promise<PrismaSmsRequest> {
    return this.prisma.smsRequest.create(args);
  }
  async updateSmsRequest(
    args: Prisma.SmsRequestUpdateArgs
  ): Promise<PrismaSmsRequest> {
    return this.prisma.smsRequest.update(args);
  }
  async deleteSmsRequest(
    args: Prisma.SmsRequestDeleteArgs
  ): Promise<PrismaSmsRequest> {
    return this.prisma.smsRequest.delete(args);
  }
}
