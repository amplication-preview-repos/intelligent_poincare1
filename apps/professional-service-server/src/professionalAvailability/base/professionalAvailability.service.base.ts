/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ProfessionalAvailability as PrismaProfessionalAvailability,
} from "@prisma/client";

export class ProfessionalAvailabilityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProfessionalAvailabilityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.professionalAvailability.count(args);
  }

  async professionalAvailabilities(
    args: Prisma.ProfessionalAvailabilityFindManyArgs
  ): Promise<PrismaProfessionalAvailability[]> {
    return this.prisma.professionalAvailability.findMany(args);
  }
  async professionalAvailability(
    args: Prisma.ProfessionalAvailabilityFindUniqueArgs
  ): Promise<PrismaProfessionalAvailability | null> {
    return this.prisma.professionalAvailability.findUnique(args);
  }
  async createProfessionalAvailability(
    args: Prisma.ProfessionalAvailabilityCreateArgs
  ): Promise<PrismaProfessionalAvailability> {
    return this.prisma.professionalAvailability.create(args);
  }
  async updateProfessionalAvailability(
    args: Prisma.ProfessionalAvailabilityUpdateArgs
  ): Promise<PrismaProfessionalAvailability> {
    return this.prisma.professionalAvailability.update(args);
  }
  async deleteProfessionalAvailability(
    args: Prisma.ProfessionalAvailabilityDeleteArgs
  ): Promise<PrismaProfessionalAvailability> {
    return this.prisma.professionalAvailability.delete(args);
  }
}
