/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProfessionalAvailability } from "./ProfessionalAvailability";
import { ProfessionalAvailabilityCountArgs } from "./ProfessionalAvailabilityCountArgs";
import { ProfessionalAvailabilityFindManyArgs } from "./ProfessionalAvailabilityFindManyArgs";
import { ProfessionalAvailabilityFindUniqueArgs } from "./ProfessionalAvailabilityFindUniqueArgs";
import { CreateProfessionalAvailabilityArgs } from "./CreateProfessionalAvailabilityArgs";
import { UpdateProfessionalAvailabilityArgs } from "./UpdateProfessionalAvailabilityArgs";
import { DeleteProfessionalAvailabilityArgs } from "./DeleteProfessionalAvailabilityArgs";
import { ProfessionalAvailabilityService } from "../professionalAvailability.service";
@graphql.Resolver(() => ProfessionalAvailability)
export class ProfessionalAvailabilityResolverBase {
  constructor(protected readonly service: ProfessionalAvailabilityService) {}

  async _professionalAvailabilitiesMeta(
    @graphql.Args() args: ProfessionalAvailabilityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProfessionalAvailability])
  async professionalAvailabilities(
    @graphql.Args() args: ProfessionalAvailabilityFindManyArgs
  ): Promise<ProfessionalAvailability[]> {
    return this.service.professionalAvailabilities(args);
  }

  @graphql.Query(() => ProfessionalAvailability, { nullable: true })
  async professionalAvailability(
    @graphql.Args() args: ProfessionalAvailabilityFindUniqueArgs
  ): Promise<ProfessionalAvailability | null> {
    const result = await this.service.professionalAvailability(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProfessionalAvailability)
  async createProfessionalAvailability(
    @graphql.Args() args: CreateProfessionalAvailabilityArgs
  ): Promise<ProfessionalAvailability> {
    return await this.service.createProfessionalAvailability({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProfessionalAvailability)
  async updateProfessionalAvailability(
    @graphql.Args() args: UpdateProfessionalAvailabilityArgs
  ): Promise<ProfessionalAvailability | null> {
    try {
      return await this.service.updateProfessionalAvailability({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProfessionalAvailability)
  async deleteProfessionalAvailability(
    @graphql.Args() args: DeleteProfessionalAvailabilityArgs
  ): Promise<ProfessionalAvailability | null> {
    try {
      return await this.service.deleteProfessionalAvailability(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
