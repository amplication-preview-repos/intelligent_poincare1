/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServiceTimeSlotService } from "../serviceTimeSlot.service";
import { ServiceTimeSlotCreateInput } from "./ServiceTimeSlotCreateInput";
import { ServiceTimeSlot } from "./ServiceTimeSlot";
import { ServiceTimeSlotFindManyArgs } from "./ServiceTimeSlotFindManyArgs";
import { ServiceTimeSlotWhereUniqueInput } from "./ServiceTimeSlotWhereUniqueInput";
import { ServiceTimeSlotUpdateInput } from "./ServiceTimeSlotUpdateInput";

export class ServiceTimeSlotControllerBase {
  constructor(protected readonly service: ServiceTimeSlotService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServiceTimeSlot })
  async createServiceTimeSlot(
    @common.Body() data: ServiceTimeSlotCreateInput
  ): Promise<ServiceTimeSlot> {
    return await this.service.createServiceTimeSlot({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        timestampEnd: true,
        timestampStart: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ServiceTimeSlot] })
  @ApiNestedQuery(ServiceTimeSlotFindManyArgs)
  async serviceTimeSlots(
    @common.Req() request: Request
  ): Promise<ServiceTimeSlot[]> {
    const args = plainToClass(ServiceTimeSlotFindManyArgs, request.query);
    return this.service.serviceTimeSlots({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        timestampEnd: true,
        timestampStart: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServiceTimeSlot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async serviceTimeSlot(
    @common.Param() params: ServiceTimeSlotWhereUniqueInput
  ): Promise<ServiceTimeSlot | null> {
    const result = await this.service.serviceTimeSlot({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        timestampEnd: true,
        timestampStart: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServiceTimeSlot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateServiceTimeSlot(
    @common.Param() params: ServiceTimeSlotWhereUniqueInput,
    @common.Body() data: ServiceTimeSlotUpdateInput
  ): Promise<ServiceTimeSlot | null> {
    try {
      return await this.service.updateServiceTimeSlot({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          timestampEnd: true,
          timestampStart: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServiceTimeSlot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteServiceTimeSlot(
    @common.Param() params: ServiceTimeSlotWhereUniqueInput
  ): Promise<ServiceTimeSlot | null> {
    try {
      return await this.service.deleteServiceTimeSlot({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          timestampEnd: true,
          timestampStart: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
