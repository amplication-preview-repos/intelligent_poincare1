/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ServiceTimeSlot } from "./ServiceTimeSlot";
import { ServiceTimeSlotCountArgs } from "./ServiceTimeSlotCountArgs";
import { ServiceTimeSlotFindManyArgs } from "./ServiceTimeSlotFindManyArgs";
import { ServiceTimeSlotFindUniqueArgs } from "./ServiceTimeSlotFindUniqueArgs";
import { CreateServiceTimeSlotArgs } from "./CreateServiceTimeSlotArgs";
import { UpdateServiceTimeSlotArgs } from "./UpdateServiceTimeSlotArgs";
import { DeleteServiceTimeSlotArgs } from "./DeleteServiceTimeSlotArgs";
import { ServiceTimeSlotService } from "../serviceTimeSlot.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ServiceTimeSlot)
export class ServiceTimeSlotResolverBase {
  constructor(
    protected readonly service: ServiceTimeSlotService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ServiceTimeSlot",
    action: "read",
    possession: "any",
  })
  async _serviceTimeSlotsMeta(
    @graphql.Args() args: ServiceTimeSlotCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ServiceTimeSlot])
  @nestAccessControl.UseRoles({
    resource: "ServiceTimeSlot",
    action: "read",
    possession: "any",
  })
  async serviceTimeSlots(
    @graphql.Args() args: ServiceTimeSlotFindManyArgs
  ): Promise<ServiceTimeSlot[]> {
    return this.service.serviceTimeSlots(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ServiceTimeSlot, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ServiceTimeSlot",
    action: "read",
    possession: "own",
  })
  async serviceTimeSlot(
    @graphql.Args() args: ServiceTimeSlotFindUniqueArgs
  ): Promise<ServiceTimeSlot | null> {
    const result = await this.service.serviceTimeSlot(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceTimeSlot)
  @nestAccessControl.UseRoles({
    resource: "ServiceTimeSlot",
    action: "create",
    possession: "any",
  })
  async createServiceTimeSlot(
    @graphql.Args() args: CreateServiceTimeSlotArgs
  ): Promise<ServiceTimeSlot> {
    return await this.service.createServiceTimeSlot({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceTimeSlot)
  @nestAccessControl.UseRoles({
    resource: "ServiceTimeSlot",
    action: "update",
    possession: "any",
  })
  async updateServiceTimeSlot(
    @graphql.Args() args: UpdateServiceTimeSlotArgs
  ): Promise<ServiceTimeSlot | null> {
    try {
      return await this.service.updateServiceTimeSlot({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceTimeSlot)
  @nestAccessControl.UseRoles({
    resource: "ServiceTimeSlot",
    action: "delete",
    possession: "any",
  })
  async deleteServiceTimeSlot(
    @graphql.Args() args: DeleteServiceTimeSlotArgs
  ): Promise<ServiceTimeSlot | null> {
    try {
      return await this.service.deleteServiceTimeSlot(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
