/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ServiceType } from "./ServiceType";
import { ServiceTypeCountArgs } from "./ServiceTypeCountArgs";
import { ServiceTypeFindManyArgs } from "./ServiceTypeFindManyArgs";
import { ServiceTypeFindUniqueArgs } from "./ServiceTypeFindUniqueArgs";
import { CreateServiceTypeArgs } from "./CreateServiceTypeArgs";
import { UpdateServiceTypeArgs } from "./UpdateServiceTypeArgs";
import { DeleteServiceTypeArgs } from "./DeleteServiceTypeArgs";
import { ServiceTypeService } from "../serviceType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ServiceType)
export class ServiceTypeResolverBase {
  constructor(
    protected readonly service: ServiceTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ServiceType",
    action: "read",
    possession: "any",
  })
  async _serviceTypesMeta(
    @graphql.Args() args: ServiceTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ServiceType])
  @nestAccessControl.UseRoles({
    resource: "ServiceType",
    action: "read",
    possession: "any",
  })
  async serviceTypes(
    @graphql.Args() args: ServiceTypeFindManyArgs
  ): Promise<ServiceType[]> {
    return this.service.serviceTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ServiceType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ServiceType",
    action: "read",
    possession: "own",
  })
  async serviceType(
    @graphql.Args() args: ServiceTypeFindUniqueArgs
  ): Promise<ServiceType | null> {
    const result = await this.service.serviceType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceType)
  @nestAccessControl.UseRoles({
    resource: "ServiceType",
    action: "create",
    possession: "any",
  })
  async createServiceType(
    @graphql.Args() args: CreateServiceTypeArgs
  ): Promise<ServiceType> {
    return await this.service.createServiceType({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceType)
  @nestAccessControl.UseRoles({
    resource: "ServiceType",
    action: "update",
    possession: "any",
  })
  async updateServiceType(
    @graphql.Args() args: UpdateServiceTypeArgs
  ): Promise<ServiceType | null> {
    try {
      return await this.service.updateServiceType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceType)
  @nestAccessControl.UseRoles({
    resource: "ServiceType",
    action: "delete",
    possession: "any",
  })
  async deleteServiceType(
    @graphql.Args() args: DeleteServiceTypeArgs
  ): Promise<ServiceType | null> {
    try {
      return await this.service.deleteServiceType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
