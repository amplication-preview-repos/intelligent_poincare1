/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProfessionalAvailabiltyExceptionsService } from "../professionalAvailabiltyExceptions.service";
import { ProfessionalAvailabiltyExceptionsCreateInput } from "./ProfessionalAvailabiltyExceptionsCreateInput";
import { ProfessionalAvailabiltyExceptions } from "./ProfessionalAvailabiltyExceptions";
import { ProfessionalAvailabiltyExceptionsFindManyArgs } from "./ProfessionalAvailabiltyExceptionsFindManyArgs";
import { ProfessionalAvailabiltyExceptionsWhereUniqueInput } from "./ProfessionalAvailabiltyExceptionsWhereUniqueInput";
import { ProfessionalAvailabiltyExceptionsUpdateInput } from "./ProfessionalAvailabiltyExceptionsUpdateInput";

export class ProfessionalAvailabiltyExceptionsControllerBase {
  constructor(
    protected readonly service: ProfessionalAvailabiltyExceptionsService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProfessionalAvailabiltyExceptions })
  async createProfessionalAvailabiltyExceptions(
    @common.Body() data: ProfessionalAvailabiltyExceptionsCreateInput
  ): Promise<ProfessionalAvailabiltyExceptions> {
    return await this.service.createProfessionalAvailabiltyExceptions({
      data: data,
      select: {
        createdAt: true,
        date: true,
        fkProfessional: true,
        fkTimeSlot: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProfessionalAvailabiltyExceptions] })
  @ApiNestedQuery(ProfessionalAvailabiltyExceptionsFindManyArgs)
  async professionalAvailabiltyExceptionsItems(
    @common.Req() request: Request
  ): Promise<ProfessionalAvailabiltyExceptions[]> {
    const args = plainToClass(
      ProfessionalAvailabiltyExceptionsFindManyArgs,
      request.query
    );
    return this.service.professionalAvailabiltyExceptionsItems({
      ...args,
      select: {
        createdAt: true,
        date: true,
        fkProfessional: true,
        fkTimeSlot: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProfessionalAvailabiltyExceptions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async professionalAvailabiltyExceptions(
    @common.Param() params: ProfessionalAvailabiltyExceptionsWhereUniqueInput
  ): Promise<ProfessionalAvailabiltyExceptions | null> {
    const result = await this.service.professionalAvailabiltyExceptions({
      where: params,
      select: {
        createdAt: true,
        date: true,
        fkProfessional: true,
        fkTimeSlot: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProfessionalAvailabiltyExceptions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProfessionalAvailabiltyExceptions(
    @common.Param() params: ProfessionalAvailabiltyExceptionsWhereUniqueInput,
    @common.Body() data: ProfessionalAvailabiltyExceptionsUpdateInput
  ): Promise<ProfessionalAvailabiltyExceptions | null> {
    try {
      return await this.service.updateProfessionalAvailabiltyExceptions({
        where: params,
        data: data,
        select: {
          createdAt: true,
          date: true,
          fkProfessional: true,
          fkTimeSlot: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProfessionalAvailabiltyExceptions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProfessionalAvailabiltyExceptions(
    @common.Param() params: ProfessionalAvailabiltyExceptionsWhereUniqueInput
  ): Promise<ProfessionalAvailabiltyExceptions | null> {
    try {
      return await this.service.deleteProfessionalAvailabiltyExceptions({
        where: params,
        select: {
          createdAt: true,
          date: true,
          fkProfessional: true,
          fkTimeSlot: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
