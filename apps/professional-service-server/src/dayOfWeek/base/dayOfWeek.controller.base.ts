/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DayOfWeekService } from "../dayOfWeek.service";
import { DayOfWeekCreateInput } from "./DayOfWeekCreateInput";
import { DayOfWeek } from "./DayOfWeek";
import { DayOfWeekFindManyArgs } from "./DayOfWeekFindManyArgs";
import { DayOfWeekWhereUniqueInput } from "./DayOfWeekWhereUniqueInput";
import { DayOfWeekUpdateInput } from "./DayOfWeekUpdateInput";

export class DayOfWeekControllerBase {
  constructor(protected readonly service: DayOfWeekService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DayOfWeek })
  async createDayOfWeek(
    @common.Body() data: DayOfWeekCreateInput
  ): Promise<DayOfWeek> {
    return await this.service.createDayOfWeek({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DayOfWeek] })
  @ApiNestedQuery(DayOfWeekFindManyArgs)
  async dayOfWeeks(@common.Req() request: Request): Promise<DayOfWeek[]> {
    const args = plainToClass(DayOfWeekFindManyArgs, request.query);
    return this.service.dayOfWeeks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DayOfWeek })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dayOfWeek(
    @common.Param() params: DayOfWeekWhereUniqueInput
  ): Promise<DayOfWeek | null> {
    const result = await this.service.dayOfWeek({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DayOfWeek })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDayOfWeek(
    @common.Param() params: DayOfWeekWhereUniqueInput,
    @common.Body() data: DayOfWeekUpdateInput
  ): Promise<DayOfWeek | null> {
    try {
      return await this.service.updateDayOfWeek({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DayOfWeek })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDayOfWeek(
    @common.Param() params: DayOfWeekWhereUniqueInput
  ): Promise<DayOfWeek | null> {
    try {
      return await this.service.deleteDayOfWeek({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
