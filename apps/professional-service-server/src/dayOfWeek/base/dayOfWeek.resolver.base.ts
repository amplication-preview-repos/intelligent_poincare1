/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DayOfWeek } from "./DayOfWeek";
import { DayOfWeekCountArgs } from "./DayOfWeekCountArgs";
import { DayOfWeekFindManyArgs } from "./DayOfWeekFindManyArgs";
import { DayOfWeekFindUniqueArgs } from "./DayOfWeekFindUniqueArgs";
import { CreateDayOfWeekArgs } from "./CreateDayOfWeekArgs";
import { UpdateDayOfWeekArgs } from "./UpdateDayOfWeekArgs";
import { DeleteDayOfWeekArgs } from "./DeleteDayOfWeekArgs";
import { DayOfWeekService } from "../dayOfWeek.service";
@graphql.Resolver(() => DayOfWeek)
export class DayOfWeekResolverBase {
  constructor(protected readonly service: DayOfWeekService) {}

  async _dayOfWeeksMeta(
    @graphql.Args() args: DayOfWeekCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DayOfWeek])
  async dayOfWeeks(
    @graphql.Args() args: DayOfWeekFindManyArgs
  ): Promise<DayOfWeek[]> {
    return this.service.dayOfWeeks(args);
  }

  @graphql.Query(() => DayOfWeek, { nullable: true })
  async dayOfWeek(
    @graphql.Args() args: DayOfWeekFindUniqueArgs
  ): Promise<DayOfWeek | null> {
    const result = await this.service.dayOfWeek(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DayOfWeek)
  async createDayOfWeek(
    @graphql.Args() args: CreateDayOfWeekArgs
  ): Promise<DayOfWeek> {
    return await this.service.createDayOfWeek({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DayOfWeek)
  async updateDayOfWeek(
    @graphql.Args() args: UpdateDayOfWeekArgs
  ): Promise<DayOfWeek | null> {
    try {
      return await this.service.updateDayOfWeek({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DayOfWeek)
  async deleteDayOfWeek(
    @graphql.Args() args: DeleteDayOfWeekArgs
  ): Promise<DayOfWeek | null> {
    try {
      return await this.service.deleteDayOfWeek(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
