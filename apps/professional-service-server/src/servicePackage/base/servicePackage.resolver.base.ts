/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ServicePackage } from "./ServicePackage";
import { ServicePackageCountArgs } from "./ServicePackageCountArgs";
import { ServicePackageFindManyArgs } from "./ServicePackageFindManyArgs";
import { ServicePackageFindUniqueArgs } from "./ServicePackageFindUniqueArgs";
import { CreateServicePackageArgs } from "./CreateServicePackageArgs";
import { UpdateServicePackageArgs } from "./UpdateServicePackageArgs";
import { DeleteServicePackageArgs } from "./DeleteServicePackageArgs";
import { ServicePackageService } from "../servicePackage.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ServicePackage)
export class ServicePackageResolverBase {
  constructor(
    protected readonly service: ServicePackageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ServicePackage",
    action: "read",
    possession: "any",
  })
  async _servicePackagesMeta(
    @graphql.Args() args: ServicePackageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ServicePackage])
  @nestAccessControl.UseRoles({
    resource: "ServicePackage",
    action: "read",
    possession: "any",
  })
  async servicePackages(
    @graphql.Args() args: ServicePackageFindManyArgs
  ): Promise<ServicePackage[]> {
    return this.service.servicePackages(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ServicePackage, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ServicePackage",
    action: "read",
    possession: "own",
  })
  async servicePackage(
    @graphql.Args() args: ServicePackageFindUniqueArgs
  ): Promise<ServicePackage | null> {
    const result = await this.service.servicePackage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServicePackage)
  @nestAccessControl.UseRoles({
    resource: "ServicePackage",
    action: "create",
    possession: "any",
  })
  async createServicePackage(
    @graphql.Args() args: CreateServicePackageArgs
  ): Promise<ServicePackage> {
    return await this.service.createServicePackage({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServicePackage)
  @nestAccessControl.UseRoles({
    resource: "ServicePackage",
    action: "update",
    possession: "any",
  })
  async updateServicePackage(
    @graphql.Args() args: UpdateServicePackageArgs
  ): Promise<ServicePackage | null> {
    try {
      return await this.service.updateServicePackage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServicePackage)
  @nestAccessControl.UseRoles({
    resource: "ServicePackage",
    action: "delete",
    possession: "any",
  })
  async deleteServicePackage(
    @graphql.Args() args: DeleteServicePackageArgs
  ): Promise<ServicePackage | null> {
    try {
      return await this.service.deleteServicePackage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
