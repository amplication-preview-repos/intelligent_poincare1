/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ServiceQuote } from "./ServiceQuote";
import { ServiceQuoteCountArgs } from "./ServiceQuoteCountArgs";
import { ServiceQuoteFindManyArgs } from "./ServiceQuoteFindManyArgs";
import { ServiceQuoteFindUniqueArgs } from "./ServiceQuoteFindUniqueArgs";
import { CreateServiceQuoteArgs } from "./CreateServiceQuoteArgs";
import { UpdateServiceQuoteArgs } from "./UpdateServiceQuoteArgs";
import { DeleteServiceQuoteArgs } from "./DeleteServiceQuoteArgs";
import { ServiceQuoteService } from "../serviceQuote.service";
@graphql.Resolver(() => ServiceQuote)
export class ServiceQuoteResolverBase {
  constructor(protected readonly service: ServiceQuoteService) {}

  async _serviceQuotesMeta(
    @graphql.Args() args: ServiceQuoteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ServiceQuote])
  async serviceQuotes(
    @graphql.Args() args: ServiceQuoteFindManyArgs
  ): Promise<ServiceQuote[]> {
    return this.service.serviceQuotes(args);
  }

  @graphql.Query(() => ServiceQuote, { nullable: true })
  async serviceQuote(
    @graphql.Args() args: ServiceQuoteFindUniqueArgs
  ): Promise<ServiceQuote | null> {
    const result = await this.service.serviceQuote(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ServiceQuote)
  async createServiceQuote(
    @graphql.Args() args: CreateServiceQuoteArgs
  ): Promise<ServiceQuote> {
    return await this.service.createServiceQuote({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ServiceQuote)
  async updateServiceQuote(
    @graphql.Args() args: UpdateServiceQuoteArgs
  ): Promise<ServiceQuote | null> {
    try {
      return await this.service.updateServiceQuote({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceQuote)
  async deleteServiceQuote(
    @graphql.Args() args: DeleteServiceQuoteArgs
  ): Promise<ServiceQuote | null> {
    try {
      return await this.service.deleteServiceQuote(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
