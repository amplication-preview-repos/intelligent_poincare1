/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ServiceQuote as PrismaServiceQuote } from "@prisma/client";

export class ServiceQuoteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServiceQuoteCountArgs, "select">
  ): Promise<number> {
    return this.prisma.serviceQuote.count(args);
  }

  async serviceQuotes(
    args: Prisma.ServiceQuoteFindManyArgs
  ): Promise<PrismaServiceQuote[]> {
    return this.prisma.serviceQuote.findMany(args);
  }
  async serviceQuote(
    args: Prisma.ServiceQuoteFindUniqueArgs
  ): Promise<PrismaServiceQuote | null> {
    return this.prisma.serviceQuote.findUnique(args);
  }
  async createServiceQuote(
    args: Prisma.ServiceQuoteCreateArgs
  ): Promise<PrismaServiceQuote> {
    return this.prisma.serviceQuote.create(args);
  }
  async updateServiceQuote(
    args: Prisma.ServiceQuoteUpdateArgs
  ): Promise<PrismaServiceQuote> {
    return this.prisma.serviceQuote.update(args);
  }
  async deleteServiceQuote(
    args: Prisma.ServiceQuoteDeleteArgs
  ): Promise<PrismaServiceQuote> {
    return this.prisma.serviceQuote.delete(args);
  }
}
