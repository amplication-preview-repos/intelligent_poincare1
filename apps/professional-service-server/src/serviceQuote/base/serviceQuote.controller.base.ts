/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServiceQuoteService } from "../serviceQuote.service";
import { ServiceQuoteCreateInput } from "./ServiceQuoteCreateInput";
import { ServiceQuote } from "./ServiceQuote";
import { ServiceQuoteFindManyArgs } from "./ServiceQuoteFindManyArgs";
import { ServiceQuoteWhereUniqueInput } from "./ServiceQuoteWhereUniqueInput";
import { ServiceQuoteUpdateInput } from "./ServiceQuoteUpdateInput";

export class ServiceQuoteControllerBase {
  constructor(protected readonly service: ServiceQuoteService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServiceQuote })
  async createServiceQuote(
    @common.Body() data: ServiceQuoteCreateInput
  ): Promise<ServiceQuote> {
    return await this.service.createServiceQuote({
      data: data,
      select: {
        createdAt: true,
        fkServicePackage: true,
        fkStatus: true,
        fkUser: true,
        id: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ServiceQuote] })
  @ApiNestedQuery(ServiceQuoteFindManyArgs)
  async serviceQuotes(@common.Req() request: Request): Promise<ServiceQuote[]> {
    const args = plainToClass(ServiceQuoteFindManyArgs, request.query);
    return this.service.serviceQuotes({
      ...args,
      select: {
        createdAt: true,
        fkServicePackage: true,
        fkStatus: true,
        fkUser: true,
        id: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServiceQuote })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async serviceQuote(
    @common.Param() params: ServiceQuoteWhereUniqueInput
  ): Promise<ServiceQuote | null> {
    const result = await this.service.serviceQuote({
      where: params,
      select: {
        createdAt: true,
        fkServicePackage: true,
        fkStatus: true,
        fkUser: true,
        id: true,
        price: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServiceQuote })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateServiceQuote(
    @common.Param() params: ServiceQuoteWhereUniqueInput,
    @common.Body() data: ServiceQuoteUpdateInput
  ): Promise<ServiceQuote | null> {
    try {
      return await this.service.updateServiceQuote({
        where: params,
        data: data,
        select: {
          createdAt: true,
          fkServicePackage: true,
          fkStatus: true,
          fkUser: true,
          id: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServiceQuote })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteServiceQuote(
    @common.Param() params: ServiceQuoteWhereUniqueInput
  ): Promise<ServiceQuote | null> {
    try {
      return await this.service.deleteServiceQuote({
        where: params,
        select: {
          createdAt: true,
          fkServicePackage: true,
          fkStatus: true,
          fkUser: true,
          id: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
